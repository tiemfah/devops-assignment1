name: Build Test and push
on: [ push ]
env:
  IMAGE_NAME: student_service
  REPO_NAME: devops-assignment1

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Build docker
        run: |
          docker build . -t $REPO_NAME/$IMAGE_NAME
      - name: Start Docker Compose
        run: |
          docker compose up -d
          docker compose ps
      - name: Wait for Services to be Ready
        run: |
          sleep 10
          docker ps -a

      - name: "Check files existence"
        uses: andstor/file-existence-action@v2
        with:
          files: "postman/collection.json,postman/environment.json"
          fail: true

      - name: test with CURL
        run: |
          curl --location --request POST 'http://localhost:8080/tutorial/1.0.0/student' \
          --header 'Content-Type: application/json' \
          --data '{
              "first_name": "test",
              "last_name": "test"
          }'

      - name: Run API Tests
        id: run-newman
        uses: anthonyvscode/newman-action@master
        with:
          collection: postman/collection.json
          environment: postman/environment.json
          reporters: cli
          bail: true

      - name: Check if we failed
        id: fail-check
        shell: bash
        env:
          JSON_DOC: ${{ steps.run-newman.outputs.summary }}
        run: |
          printf '%s\n' "$JSON_DOC" > summary.json
          cat summary.json
          if grep -q Collection summary.json; then
            echo "failed=false" >> $GITHUB_OUTPUT;
          else
            echo "failed=true" >> $GITHUB_OUTPUT;
          fi

      - name: fail if empty
        if: ${{ steps.fail-check.outputs.failed == 'true' }}
        run: exit 1

      - name: Login to Container Registry
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Push image to docker hub Container Registry
        run: |
          docker push $REPO_NAME/$IMAGE_NAME
